openapi: 3.0.0
info:
  version: 1.0.0
  title: Spikes API
  description: RESTful API for Drake University Apparel
servers:
  - url: 'http://localhost:5555'
    description: Local Development
  - url: 'https://api-dev.drake.drake/'
    description: Dev Environment
  - url: 'https://api.drake.drake/'
    description: Prod Environment
paths:
  /items:
    get:
      description: Returns a collection of items
      responses:
        '200':
          description: A collection of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Adds a new item
      requestBody:
        description: Item to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '303':
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing item
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/items/{itemId}':
    get:
      description: Returns an item
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Updates an item
      requestBody:
        description: Item to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item successfully updated
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemNotFound'
    delete:
      description: Deletes an item
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item successfully deleted
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /customers:
    get:
      description: Returns a collection of customers
      responses:
        "200":
          description: A collection of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customers"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Adds a new customer
      requestBody:
        description: customer to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        "201":
          description: customer successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        "303":
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing customer
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  "/customers/{email}":
    get:
      description: Returns a customer
      parameters:
        - name: email
          in: path
          description: Identifier for a customer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        "404":
          description: customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Updates a customer
      requestBody:
        description: customer to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      parameters:
        - name: email
          in: path
          description: Identifier for a customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: customer successfully updated
        "404":
          description: customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerNotFound"
    delete:
      description: Deletes a customer
      parameters:
        - name: email
          in: path
          description: Identifier for a customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: customer successfully deleted
        "404":
          description: customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
 
  /carts:
    get:
      description: Returns a collection of carts
      responses:
        '200':
          description: A collection of carts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/carts'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Adds a new cart
      requestBody:
        description: cart to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cart'
      responses:
        '201':
          description: cart successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cart'
        '303':
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing cart
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          
  '/carts/{customer}':
    get:
      description: Returns an cart
      parameters:
        - name: customer
          in: path
          description: Identifier for an cart
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cart'
        '404':
          description: cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'      
    put:
      description: Updates an cart
      requestBody:
        description: cart to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cart'
      parameters:
        - name: customer
          in: path
          description: Identifier for an cart
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: cart successfully updated
        '404':
          description: cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartNotFound'   
                
    delete:
      description: Deletes an cart
      parameters:
        - name: customer
          in: path
          description: Identifier for an cart
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: cart successfully deleted
        '404':
          description: cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
   
  /cartItems:
    get:
      description: Returns an amount items
      responses:
        '200':
          description: An amount of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItems'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Adds an amount of items
      requestBody:
        description: Item amounts to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartItems'
      responses:
        '201':
          description: Item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItems'
        '303':
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of existing item amounts
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/cartItems/{item}':
    get:
      description: Returns an item
      parameters:
        - name: item
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItems'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItemsNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
                
    put:
      description: Updates an item
      requestBody:
        description: Item to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartItems'
      parameters:
        - name: item
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item successfully updated
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItemsNotFound'
                
    delete:
      description: Deletes an item
      parameters:
        - name: item
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item successfully deleted
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartItemsNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
components:
  schemas:
    Item:
      type: object
      properties:
        itemId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 50
        price:
          type: number
          format: floating
      example:
        itemId: def5cd03-7bf4-49e9-8f0b-380f90c86ec1
        name: Drake Bulldogs Sweatshirt
        description: Get comfortable in these sweats and look fly while wearing them
        price: 19.99
    Items:
      type: array
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
      example:
        - itemId: def5cd03-7bf4-49e9-8f0b-380f90c86ec1
          name: Drake Bulldogs Sweatshirt
          description: Get comfortable in these sweats and look fly while wearing them
          price: 19.99
        - itemId: 504550bc-d21e-43c3-8767-0c1bd59a173c
          name: Drake Bulldogs Sweatpants
          description: Get comfortable in these sweats and look fly while wearing them
          price: 19.99
    ItemNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Item not found
        
    customer:
      type: object
      properties:
        email:
          type: string
          format: uuid
        Firstname:
          type: string
          maxLength: 50
        Lastname:
          type: string
          maxLength: 50
        PhoneNumber:
          type: number
          format: floating
      example:
        - email: sweetdreamsaremadeofthese@hotmail.com
          Firstname: BillyBob
          Lastname: readnich
          PhoneNumber: 1234567890
      
    customers:
      type: array
      properties:
          customers:
            $ref: '#/components/schemas/customers' 
     
    customerNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: customer not found      
   
    cart:
      type: object
      properties:
        customer:
          type: string
          format: uuid
        customerName:
          type: string
          maxLength: 50
        CreatedDate:
          type: string
          maxLength: 50
        PurchasedDate:
          type: string
          maxLength: 50   
      example:
      - customerName: John Wiggins
        CreatedDate: March 14th 2019
        PurchasedDate: December 19th 2019
    carts:
      type: array
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/cart'
            
    cartNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: cart not found
    
    cartItems:
      type: object
      properties:
        item:
          type: string
          format: uuid
        itemName:
          type: string
          maxLength: 50
        itemAmount:
          type: number
          format: integer
          
    cartItemsNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: cart not found
            
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 500
        error: Unexpected Error
        message: An unexpected error occurred while processing your request
